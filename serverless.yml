org: guozalex
app: spending-sidekick
service: spending-sidekick

plugins:
  - serverless-wsgi
  - serverless-python-requirements

custom:
  tableName: 'expenses-table-dev'
  wsgi:
    app: app.app
    pythonBin: python3 
    packRequirements: false
  pythonRequirements:
    dockerFile: /Users/alexguo/.docker/machine/machines/default

provider:
  name: aws
  logs:
    restApi: false
  runtime: python3.8
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { 'Fn::GetAtt': ['ExpensesDynamoDBTable', 'Arn'] }
  environment:
    EXPENSES_TABLE: ${self:custom.tableName}

package:
  exclude:
    - node_modules/**
    - venv/**

functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
  # getUserExpenses:
  #   handler: wsgi_handler.handler
  #   events:
  #     - http: 'GET /expenses/{proxy+}'
  # createExpense:
  #   handler: wsgi_handler.handler
  #   events:
  #     - http: 'POST /expenses'
  
resources:
  Resources:
    ExpensesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
